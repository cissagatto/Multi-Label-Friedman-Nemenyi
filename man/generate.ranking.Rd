% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ranking.R
\name{generate.ranking}
\alias{generate.ranking}
\title{Generate Various Types of Rankings for Each Row in a Dataset}
\usage{
generate.ranking(data)
}
\arguments{
\item{data}{A data frame where each row represents a set of values to be ranked.
The columns of the data frame are considered as the different items to rank.}
}
\value{
A list containing multiple data frames with rankings calculated 
  using different tie-breaking methods. The list includes:
  \describe{
    \item{rank.first.0}{Rankings with "first" tie-breaking method, in original order.}
    \item{rank.last.0}{Rankings with "last" tie-breaking method, in original order.}
    \item{rank.average.0}{Rankings with "average" tie-breaking method, in original order.}
    \item{rank.random.0}{Rankings with "random" tie-breaking method, in original order.}
    \item{rank.min.0}{Rankings with "min" tie-breaking method, in original order.}
    \item{rank.max.0}{Rankings with "max" tie-breaking method, in original order.}
    \item{rank.first.1}{Rankings with "first" tie-breaking method, in reverse order.}
    \item{rank.last.1}{Rankings with "last" tie-breaking method, in reverse order.}
    \item{rank.average.1}{Rankings with "average" tie-breaking method, in reverse order.}
    \item{rank.random.1}{Rankings with "random" tie-breaking method, in reverse order.}
    \item{rank.min.1}{Rankings with "min" tie-breaking method, in reverse order.}
    \item{rank.max.1}{Rankings with "max" tie-breaking method, in reverse order.}
  }
}
\description{
This function computes rankings for each row of a dataset using different 
tie-breaking methods. It generates rankings in both the original and reverse 
order (where higher ranks become lower) and returns the results in a list.
}
\examples{
# Example data frame
df <- data.frame(A = c(3, 1, 4), B = c(2, 5, 6), C = c(7, 8, 9))

# Generate rankings
rankings <- generate.ranking(df)

# View the rankings in original order
print(rankings$rank.first.0)

# View the rankings in reverse order
print(rankings$rank.first.1)

}
